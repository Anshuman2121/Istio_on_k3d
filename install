#!/bin/bash

set -e

ISTIO_PATH=istio

# Create cluster as per config
k3d cluster create --config ./k3d.yaml

if [ ! -d "$ISTIO_PATH" ]; then
    curl -L https://istio.io/downloadIstio | sh -
    mv istio* istio
fi

export PATH=$PWD/istio/bin:$PATH

istioctl profile dump default

istioctl install --set profile=default -y

# istioctl install --set profile=demo -y

kubectl label namespace default istio-injection=enabled

kubectl apply -f istio/samples/bookinfo/platform/kube/bookinfo.yaml

kubectl rollout status deployment/productpage-v1
kubectl rollout status deployment/details-v1
kubectl rollout status deployment/ratings-v1 
kubectl rollout status deployment/reviews-v1 
kubectl rollout status deployment/reviews-v2
kubectl rollout status deployment/reviews-v3


kubectl exec "$(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}')" -c ratings -- curl -sS productpage:9080/productpage | grep -o "<title>.*</title>"


kubectl apply -f istio/samples/bookinfo/networking/bookinfo-gateway.yaml
# Can use default ingress as well
# kubectl apply -f ingress.yaml

istioctl analyze

kubectl get svc istio-ingressgateway -n istio-system


export INGRESS_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].port}')
export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].port}')

export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT

echo "http://$GATEWAY_URL/productpage"

for i in $(seq 1 100); do curl -s -o /dev/null "http://$GATEWAY_URL/productpage"; done


kubectl apply -f istio/samples/addons
kubectl rollout status deployment/kiali -n istio-system

kubectl apply -f ingress.yaml

istioctl dashboard kiali


